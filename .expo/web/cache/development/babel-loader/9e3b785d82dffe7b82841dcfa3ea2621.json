{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { useState } from 'react';\nimport frogs from \"../data/frogs.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction Species(props) {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      list = _useState2[0],\n      listIt = _useState2[1];\n\n  var frogData = frogs();\n  var frogMap1 = frogData.map(function (val, index) {\n    _jsxs(TouchableOpacity, {\n      style: styles.frogs,\n      onPress: function onPress() {\n        props.showFrog(val.id);\n      },\n      children: [_jsx(Image, {\n        style: styles.frogImage,\n        source: val.image,\n        resizeMode: 'stretch'\n      }), _jsx(Text, {\n        style: styles.frogText,\n        children: val.name\n      })]\n    }, val.id);\n  });\n  return _jsx(View, {\n    style: styles.frogContainer,\n    children: frogMap\n  });\n}\n\nexport default Species;\nvar styles = StyleSheet.create({\n  frogContainer: {\n    width: '100%',\n    height: '100%',\n    flex: 1,\n    flexDirection: 'column'\n  },\n  frogImage: {\n    width: '100%',\n    height: 150,\n    backgroundColor: '#78Af9f'\n  },\n  frogs: {\n    padding: 5,\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    width: '50%'\n  },\n  frogText: {\n    fontSize: 20,\n    color: 'black',\n    textAlign: 'center'\n  }\n});","map":{"version":3,"names":["useState","frogs","Species","props","list","listIt","frogData","frogMap1","map","val","index","styles","showFrog","id","frogImage","image","frogText","name","frogContainer","frogMap","StyleSheet","create","width","height","flex","flexDirection","backgroundColor","padding","justifyContent","alignItems","fontSize","color","textAlign"],"sources":["F:/React-Native-Apps/Frogs-App/pages/Species.js"],"sourcesContent":["import {View, TouchableOpacity, Image, StyleSheet, FlatList,Text} from 'react-native'\r\nimport { useState } from 'react';\r\nimport frogs from '../data/frogs.js';\r\n\r\nfunction Species(props){\r\n    const [list, listIt] = useState(true);\r\n    const frogData = frogs();\r\n\r\n    const frogMap1 = frogData.map((val,index)=>{(\r\n        <TouchableOpacity style={styles.frogs} key={val.id} onPress={()=>{props.showFrog(val.id)}}>\r\n                <Image style={styles.frogImage} source={val.image} resizeMode={'stretch'}/>    \r\n                <Text style={styles.frogText}>{val.name}</Text>\r\n        </TouchableOpacity>\r\n    )})\r\n    return(\r\n        <View style={styles.frogContainer}>\r\n            {frogMap}\r\n        </View>\r\n    )\r\n}\r\n\r\nexport default Species;\r\n\r\nconst styles = StyleSheet.create({\r\n    frogContainer:{\r\n        width: '100%',\r\n        height: '100%',\r\n        flex: 1,\r\n        flexDirection: 'column'\r\n    },\r\n    frogImage:{\r\n        width: '100%',\r\n        height: 150,\r\n        backgroundColor: '#78Af9f'\r\n    },\r\n    frogs:{\r\n        padding: 5,\r\n        justifyContent: 'flex-start',\r\n        alignItems: 'center',\r\n        width: '50%'\r\n    },\r\n    frogText:{\r\n        fontSize: 20,\r\n        color: 'black',\r\n        textAlign: 'center'\r\n    }\r\n});"],"mappings":";;;;;;;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP;;;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAuB;EACnB,gBAAuBH,QAAQ,CAAC,IAAD,CAA/B;EAAA;EAAA,IAAOI,IAAP;EAAA,IAAaC,MAAb;;EACA,IAAMC,QAAQ,GAAGL,KAAK,EAAtB;EAEA,IAAMM,QAAQ,GAAGD,QAAQ,CAACE,GAAT,CAAa,UAACC,GAAD,EAAKC,KAAL,EAAa;IACvC,MAAC,gBAAD;MAAkB,KAAK,EAAEC,MAAM,CAACV,KAAhC;MAAoD,OAAO,EAAE,mBAAI;QAACE,KAAK,CAACS,QAAN,CAAeH,GAAG,CAACI,EAAnB;MAAuB,CAAzF;MAAA,WACQ,KAAC,KAAD;QAAO,KAAK,EAAEF,MAAM,CAACG,SAArB;QAAgC,MAAM,EAAEL,GAAG,CAACM,KAA5C;QAAmD,UAAU,EAAE;MAA/D,EADR,EAEQ,KAAC,IAAD;QAAM,KAAK,EAAEJ,MAAM,CAACK,QAApB;QAAA,UAA+BP,GAAG,CAACQ;MAAnC,EAFR;IAAA,GAA4CR,GAAG,CAACI,EAAhD,CADwC;EAK1C,CALe,CAAjB;EAMA,OACI,KAAC,IAAD;IAAM,KAAK,EAAEF,MAAM,CAACO,aAApB;IAAA,UACKC;EADL,EADJ;AAKH;;AAED,eAAejB,OAAf;AAEA,IAAMS,MAAM,GAAGS,UAAU,CAACC,MAAX,CAAkB;EAC7BH,aAAa,EAAC;IACVI,KAAK,EAAE,MADG;IAEVC,MAAM,EAAE,MAFE;IAGVC,IAAI,EAAE,CAHI;IAIVC,aAAa,EAAE;EAJL,CADe;EAO7BX,SAAS,EAAC;IACNQ,KAAK,EAAE,MADD;IAENC,MAAM,EAAE,GAFF;IAGNG,eAAe,EAAE;EAHX,CAPmB;EAY7BzB,KAAK,EAAC;IACF0B,OAAO,EAAE,CADP;IAEFC,cAAc,EAAE,YAFd;IAGFC,UAAU,EAAE,QAHV;IAIFP,KAAK,EAAE;EAJL,CAZuB;EAkB7BN,QAAQ,EAAC;IACLc,QAAQ,EAAE,EADL;IAELC,KAAK,EAAE,OAFF;IAGLC,SAAS,EAAE;EAHN;AAlBoB,CAAlB,CAAf"},"metadata":{},"sourceType":"module"}